# NOTE: This file is auto generated by OpenAPI Generator.
# URL: https://openapi-generator.tech
#
# ref: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: cheshire_cat_api Python package

on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest build
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest
        run: |
          pytest
      - name: Build package
        run: python -m build
      - name: Publish new distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
#      - name: Setup Python environment
#        uses: ./.github/actions/setup-venv
#        with:
#          python-version: ${{ matrix.python }}
#          cache-prefix: ${{ env.CACHE_PREFIX }}
#
#      - name: Restore mypy cache
#        if: matrix.task.name == 'Type check'
#        uses: actions/cache@v3
#        with:
#          path: .mypy_cache
#          key: mypy-${{ env.CACHE_PREFIX }}-${{ runner.os }}-${{ matrix.python }}-${{ hashFiles('*requirements.txt') }}-${{ github.ref }}-${{ github.sha }}
#          restore-keys: |
#            mypy-${{ env.CACHE_PREFIX }}-${{ runner.os }}-${{ matrix.python }}-${{ hashFiles('*requirements.txt') }}-${{ github.ref }}
#            mypy-${{ env.CACHE_PREFIX }}-${{ runner.os }}-${{ matrix.python }}-${{ hashFiles('*requirements.txt') }}
#
#      - name: ${{ matrix.task.name }}
#        run: |
#          . .venv/bin/activate
#          ${{ matrix.task.run }}
#
#      - name: Upload package distribution files
##        if: matrix.task.name == 'Build'
#        uses: actions/upload-artifact@v3
#        with:
#          name: package
#          path: dist
#
#      - name: Clean up
#        if: always()
#        run: |
#          . .venv/bin/activate
#          pip uninstall -y cheshire-cat-api
#
#  release:
#    name: Release
#    runs-on: ubuntu-latest
#    needs: [build]
#    if: startsWith(github.ref, 'refs/tags/')
#    steps:
#      - uses: actions/checkout@v3
#        with:
#          fetch-depth: 0
#
#      - name: Setup Python
#        uses: actions/setup-python@v4
#        with:
#          python-version: "3.10"
#
#      - name: Install requirements
#        run: |
#          pip install --upgrade pip setuptools wheel build
#          pip install -e .[dev]
#
#      - name: Prepare environment
#        run: |
#          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
#          echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
#
#      - name: Download package distribution files
#        uses: actions/download-artifact@v3
#        with:
#          name: package
#          path: dist
#
#      - name: Generate release notes
#        run: |
#          python scripts/release_notes.py > ${{ github.workspace }}-RELEASE_NOTES.md
#
#      - name: Publish GitHub release
#        uses: softprops/action-gh-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          body_path: ${{ github.workspace }}-RELEASE_NOTES.md
#          prerelease: ${{ contains(env.TAG, 'rc') }}
#          files: |
#            dist/*
#
#      - name: Publish package to PyPI
#        run: |
#          twine upload -u '${{ secrets.PYPI_USERNAME }}' -p '${{ secrets.PYPI_PASSWORD }}' dist/*
